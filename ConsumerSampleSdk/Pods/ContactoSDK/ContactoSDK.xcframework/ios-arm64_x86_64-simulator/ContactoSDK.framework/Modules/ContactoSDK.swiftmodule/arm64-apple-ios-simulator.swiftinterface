// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name ContactoSDK
@_exported import ContactoSDK
import Foundation
import Swift
import SystemConfiguration
import UIKit
import WebKit
import _Concurrency
public class ContactoWrapper : ContactoSDK.ContactoWrapperProtocol {
  public init()
  public func loadChatWidget(with info: ContactoSDK.ContactoInitInfo, navigationController: UIKit.UINavigationController, navigation: ContactoSDK.Navigation, delegate: ContactoSDK.ContactoDelegate)
  @objc deinit
}
public struct ContactoInitInfo : Swift.Encodable {
  public init(appInfo: ContactoSDK.ContactoSessionInfo, userInfo: ContactoSDK.ContactoUserInfo? = nil)
  public let appInfo: ContactoSDK.ContactoSessionInfo
  public let userInfo: ContactoSDK.ContactoUserInfo?
  public func encode(to encoder: Swift.Encoder) throws
}
public struct ContactoSessionInfo : Swift.Encodable {
  public init(appId: Swift.String, appKey: Swift.String)
  public let appId: Swift.String
  public let appKey: Swift.String
  public let device: Swift.String
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case appId
    case appKey
    case device
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
}
public struct ContactoUserInfo : Swift.Encodable {
  public init(mobileNumber: Swift.String? = nil, email: Swift.String? = nil)
  public let mobileNumber: Swift.String?
  public let email: Swift.String?
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case email
    case mobileNumber
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
}
public class Contacto {
  final public let contactoWrapper: ContactoSDK.ContactoWrapperProtocol
  public init(contactoWrapper: ContactoSDK.ContactoWrapperProtocol = ContactoWrapper())
  public func loadChatWidget(with info: ContactoSDK.ContactoInitInfo, navigationController: UIKit.UINavigationController, navigation: ContactoSDK.Navigation, delegate: ContactoSDK.ContactoDelegate)
  @objc deinit
}
public protocol Presentable {
  func toPresent() -> UIKit.UIViewController?
}
extension UIKit.UIViewController : ContactoSDK.Presentable {
  @_Concurrency.MainActor(unsafe) public func toPresent() -> UIKit.UIViewController?
}
public protocol ContactoWrapperProtocol {
  func loadChatWidget(with info: ContactoSDK.ContactoInitInfo, navigationController: UIKit.UINavigationController, navigation: ContactoSDK.Navigation, delegate: ContactoSDK.ContactoDelegate)
}
public protocol ContactoDelegate : AnyObject {
  func contacto(didFailToLoadChat withError: ContactoSDK.ContactoError)
}
public enum ContactoError {
  case noInternet
  case loadingError(Swift.String)
  case initialisationError
}
public struct Navigation {
  public let position: ContactoSDK.Position
  public init(position: ContactoSDK.Position = .pushOnExistingModule)
}
public enum Position {
  case setAsRootModule
  case pushOnExistingModule
  public static func == (a: ContactoSDK.Position, b: ContactoSDK.Position) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ContactoSDK.ContactoSessionInfo.CodingKeys : Swift.Equatable {}
extension ContactoSDK.ContactoSessionInfo.CodingKeys : Swift.Hashable {}
extension ContactoSDK.ContactoSessionInfo.CodingKeys : Swift.RawRepresentable {}
extension ContactoSDK.ContactoUserInfo.CodingKeys : Swift.Equatable {}
extension ContactoSDK.ContactoUserInfo.CodingKeys : Swift.Hashable {}
extension ContactoSDK.ContactoUserInfo.CodingKeys : Swift.RawRepresentable {}
extension ContactoSDK.Position : Swift.Equatable {}
extension ContactoSDK.Position : Swift.Hashable {}
